/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vue;

import controleur.ControleurPanelFormulaire;
import modele.Date;
import java.awt.Color;
import java.awt.Point;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;

/**
 *
 * @author miste
 */
public class PanelFormulaireChronologie extends javax.swing.JPanel {

    /**
     * Creates new form PanelFormulaireChronologie
     */
    public PanelFormulaireChronologie() {
        initComponents();
        new ControleurPanelFormulaire(this);
        requestFocus();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        fileChooserDossier = new javax.swing.JFileChooser();
        labelIntitule = new javax.swing.JLabel();
        textFieldIntitule = new javax.swing.JTextField();
        styleSaisieIntitule = new javax.swing.JProgressBar();
        labelDateDebut = new javax.swing.JLabel();
        textFieldDateDebut = new javax.swing.JTextField();
        styleSaisieDateDebut = new javax.swing.JProgressBar();
        labelDateFin = new javax.swing.JLabel();
        textFieldDateFin = new javax.swing.JTextField();
        styleSaisieDateFin = new javax.swing.JProgressBar();
        panelCalendrierDateDebut = new PanelCalendrierDate();
        panelCalendrierDateFin = new PanelCalendrierDate();
        labelPeriode = new javax.swing.JLabel();
        comboBoxPeriode = new javax.swing.JComboBox<>();
        styleSaisiePeriode = new javax.swing.JProgressBar();
        labelDossier = new javax.swing.JLabel();
        textFieldDossier = new javax.swing.JTextField();
        boutonParcourir = new javax.swing.JButton();
        styleSaisieDossier = new javax.swing.JProgressBar();

        setBackground(java.awt.Color.white);
        setPreferredSize(new java.awt.Dimension(1280, 720));

        labelIntitule.setIcon(new javax.swing.ImageIcon("ressources\\iconLabelIntitule.jpg")); // NOI18N

        textFieldIntitule.setFont(new java.awt.Font("Open Sans", 0, 24)); // NOI18N
        textFieldIntitule.setForeground(java.awt.Color.lightGray);
        textFieldIntitule.setText("Saisir le nom de la frise");
        textFieldIntitule.setBorder(null);
        textFieldIntitule.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                textFieldIntituleFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                textFieldIntituleFocusLost(evt);
            }
        });
        textFieldIntitule.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                textFieldIntituleMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                textFieldIntituleMouseReleased(evt);
            }
        });
        textFieldIntitule.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                textFieldIntituleKeyTyped(evt);
            }
        });

        labelDateDebut.setFont(new java.awt.Font("Open Sans", 1, 24)); // NOI18N
        labelDateDebut.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labelDateDebut.setIcon(new javax.swing.ImageIcon("ressources\\iconLabelSaisieDate.png")); // NOI18N

        textFieldDateDebut.setFont(new java.awt.Font("Open Sans", 0, 14)); // NOI18N
        textFieldDateDebut.setForeground(java.awt.Color.lightGray);
        textFieldDateDebut.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        textFieldDateDebut.setBorder(null);
        textFieldDateDebut.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                textFieldDateDebutFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                textFieldDateDebutFocusLost(evt);
            }
        });
        textFieldDateDebut.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                textFieldDateDebutMousePressed(evt);
            }
        });
        textFieldDateDebut.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                textFieldDateDebutKeyTyped(evt);
            }
        });

        labelDateFin.setFont(new java.awt.Font("Open Sans", 1, 24)); // NOI18N
        labelDateFin.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelDateFin.setIcon(new javax.swing.ImageIcon("ressources\\iconFleche.png")); // NOI18N

        textFieldDateFin.setFont(new java.awt.Font("Open Sans", 0, 14)); // NOI18N
        textFieldDateFin.setForeground(java.awt.Color.lightGray);
        textFieldDateFin.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        textFieldDateFin.setBorder(null);
        textFieldDateFin.setPreferredSize(new java.awt.Dimension(126, 20));
        textFieldDateFin.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                textFieldDateFinFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                textFieldDateFinFocusLost(evt);
            }
        });
        textFieldDateFin.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                textFieldDateFinMousePressed(evt);
            }
        });
        textFieldDateFin.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                textFieldDateFinKeyTyped(evt);
            }
        });

        panelCalendrierDateDebut.setPreferredSize(new java.awt.Dimension(275, 175));

        panelCalendrierDateFin.setPreferredSize(new java.awt.Dimension(275, 175));

        labelPeriode.setIcon(new javax.swing.ImageIcon("ressources\\iconLabelPeriode.png")); // NOI18N

        comboBoxPeriode.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboBoxPeriode.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                comboBoxPeriodeFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                comboBoxPeriodeFocusLost(evt);
            }
        });

        styleSaisiePeriode.setOrientation(1);

        labelDossier.setIcon(new javax.swing.ImageIcon("ressources\\iconLabelDossier.jpg")); // NOI18N

        textFieldDossier.setFont(new java.awt.Font("Open Sans", 0, 24)); // NOI18N
        textFieldDossier.setForeground(java.awt.Color.lightGray);
        textFieldDossier.setText("Saisir le chemin de sauvegarde");
        textFieldDossier.setBorder(null);
        textFieldDossier.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                textFieldDossierFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                textFieldDossierFocusLost(evt);
            }
        });
        textFieldDossier.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                textFieldDossierMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                textFieldDossierMouseReleased(evt);
            }
        });
        textFieldDossier.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                textFieldDossierKeyTyped(evt);
            }
        });

        boutonParcourir.setFont(new java.awt.Font("Open Sans", 0, 24)); // NOI18N
        boutonParcourir.setText("Parcourir");
        boutonParcourir.setFocusPainted(false);
        boutonParcourir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boutonParcourirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(182, 182, 182)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(labelDateDebut, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(labelIntitule, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addComponent(labelPeriode)
                                        .addComponent(labelDossier))
                                .addGap(65, 65, 65)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(panelCalendrierDateDebut, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                                        .addComponent(styleSaisieDateDebut, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                        .addComponent(textFieldDateDebut, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                                .addGap(18, 18, 18)
                                                                .addComponent(labelDateFin, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                .addGap(18, 18, 18)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(panelCalendrierDateFin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                                .addComponent(styleSaisieDateFin, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                .addComponent(textFieldDateFin, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(comboBoxPeriode, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(styleSaisiePeriode, javax.swing.GroupLayout.PREFERRED_SIZE, 5, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                .addComponent(textFieldIntitule, javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(styleSaisieIntitule, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 564, Short.MAX_VALUE))
                                        .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                        .addComponent(styleSaisieDossier, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(textFieldDossier, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 564, Short.MAX_VALUE))
                                                .addGap(18, 18, 18)
                                                .addComponent(boutonParcourir, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addContainerGap(251, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(79, 79, 79)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(labelIntitule, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(textFieldIntitule))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(styleSaisieIntitule, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(31, 31, 31)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(labelDateDebut, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(textFieldDateFin, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(textFieldDateDebut)
                                        .addComponent(labelDateFin, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(styleSaisieDateFin, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(styleSaisieDateDebut, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(panelCalendrierDateDebut, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(panelCalendrierDateFin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(31, 31, 31)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(labelPeriode, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(comboBoxPeriode))
                                        .addComponent(styleSaisiePeriode, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(31, 31, 31)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(boutonParcourir, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(labelDossier, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(textFieldDossier))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(styleSaisieDossier, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(372, Short.MAX_VALUE))
        );

        textFieldDateDebut.setText(new Date().toStringJourMoisAnnee());
        textFieldDateFin.setText(new Date().toStringJourMoisAnnee());
        panelCalendrierDateDebut.setVisible(false);
        panelCalendrierDateFin.setVisible(false);
    }// </editor-fold>

    private void textFieldIntituleFocusGained(java.awt.event.FocusEvent evt) {
        // TODO add your handling code here:
        avanceStyleSaisieIntitule();
        if (textFieldIntitule.getText().equals("Saisir le nom de la frise")){
            textFieldIntitule.setCaretPosition(0);
        }
    }

    private void textFieldIntituleMousePressed(java.awt.event.MouseEvent evt) {
        // TODO add your handling code here:
        if (textFieldIntitule.getText().equals("Saisir le nom de la frise")){
            textFieldIntitule.setCaretPosition(0);
            textFieldIntitule.setSelectionColor(Color.WHITE);
            textFieldIntitule.setSelectedTextColor(Color.LIGHT_GRAY);
        } else {
            textFieldIntitule.setSelectionColor(new Color(0,120,215));
            textFieldIntitule.setSelectedTextColor(Color.WHITE);
        }
    }

    private void textFieldIntituleFocusLost(java.awt.event.FocusEvent evt) {
        // TODO add your handling code here:
        reculeStyleSaisieIntitule();
    }

    private void textFieldDateDebutFocusGained(java.awt.event.FocusEvent evt) {
        // TODO add your handling code here:
        avanceStyleSaisieDateDebut();
        panelCalendrierDateDebut.setVisible(true);

    }

    private void textFieldDateDebutFocusLost(java.awt.event.FocusEvent evt) {
        // TODO add your handling code here:
        reculeStyleSaisieDateDebut();
        panelCalendrierDateDebut.setVisible(false);
        textFieldDateDebut.setForeground(Color.LIGHT_GRAY);
        textFieldDateDebut.setText(panelCalendrierDateDebut.getDateSelectionnee().toStringJourMoisAnnee());
    }

    private void textFieldIntituleKeyTyped(java.awt.event.KeyEvent evt) {
        // TODO add your handling code here:
        if (textFieldIntitule.getText().equals("Saisir le nom de la frise") && !((int)evt.getKeyChar() == 8 || (int)evt.getKeyChar() == 27 || (int)evt.getKeyChar() == 1)){
            textFieldIntitule.setText("");
            textFieldIntitule.setForeground(Color.BLACK);
        } else if (textFieldIntitule.getText().equals("")){
            textFieldIntitule.setText("Saisir le nom de la frise");
            textFieldIntitule.setForeground(Color.LIGHT_GRAY);
            textFieldIntitule.setCaretPosition(0);
        } else if (!(textFieldIntitule.getText().equals("")) && !(textFieldIntitule.getText().equals("Saisir le nom de la frise"))){
            textFieldIntitule.setSelectionColor(new Color(0,120,215));
            textFieldIntitule.setSelectedTextColor(Color.WHITE);
        }
        if ((int)evt.getKeyChar() == 127 && textFieldIntitule.getText().equals("aisir le nom de la frise")){
            textFieldIntitule.setText("Saisir le nom de la frise");
            textFieldIntitule.setCaretPosition(0);
        }
        if ((int)evt.getKeyChar() == 27){
            requestFocus();
        }
        if ((int)evt.getKeyChar() == 1 && textFieldIntitule.getText().equals("Saisir le nom de la frise")){
            textFieldIntitule.setCaretPosition(0);
        }
        System.out.println((int)evt.getKeyChar());
    }

    private void textFieldDateFinFocusGained(java.awt.event.FocusEvent evt) {
        // TODO add your handling code here:
        avanceStyleSaisieDateFin();
        panelCalendrierDateFin.setVisible(true);
    }

    private void textFieldDateFinFocusLost(java.awt.event.FocusEvent evt) {
        // TODO add your handling code here:
        reculeStyleSaisieDateFin();
        panelCalendrierDateFin.setVisible(false);
        textFieldDateFin.setForeground(Color.LIGHT_GRAY);
        textFieldDateFin.setText(panelCalendrierDateFin.getDateSelectionnee().toStringJourMoisAnnee());
    }

    private void textFieldDateDebutMousePressed(java.awt.event.MouseEvent evt) {
        // TODO add your handling code here:
        textFieldDateDebut.setSelectionStart(0);
        textFieldDateDebut.setSelectionEnd(textFieldDateDebut.getText().length());
    }

    private void textFieldDateFinMousePressed(java.awt.event.MouseEvent evt) {
        // TODO add your handling code here:
        textFieldDateFin.setSelectionStart(0);
        textFieldDateFin.setSelectionEnd(textFieldDateFin.getText().length());
    }

    private void textFieldIntituleMouseReleased(java.awt.event.MouseEvent evt) {
        // TODO add your handling code here:
        if (textFieldIntitule.getText().equals("Saisir le nom de la frise")){
            textFieldIntitule.setCaretPosition(0);
        }
    }

    private void textFieldDateDebutKeyTyped(java.awt.event.KeyEvent evt) {
        // TODO add your handling code here:/
        textFieldDateDebut.setForeground(Color.BLACK);

        analyseTextFieldDateDebut();

        if ((int)evt.getKeyChar() == 10 || (int)evt.getKeyChar() == 27){
            textFieldDateDebut.setForeground(Color.LIGHT_GRAY);
            textFieldDateDebut.setText(panelCalendrierDateDebut.getDateSelectionnee().toStringJourMoisAnnee());
            requestFocus();
        }
    }

    private void textFieldDateFinKeyTyped(java.awt.event.KeyEvent evt) {
        // TODO add your handling code here:
        textFieldDateFin.setForeground(Color.LIGHT_GRAY);

        analyseTextFieldDateFin();

        if ((int)evt.getKeyChar() == 10 || (int)evt.getKeyChar() == 27){
            textFieldDateFin.setForeground(Color.LIGHT_GRAY);
            textFieldDateFin.setText(panelCalendrierDateFin.getDateSelectionnee().toStringJourMoisAnnee());
            requestFocus();
        }
    }

    private void comboBoxPeriodeFocusGained(java.awt.event.FocusEvent evt) {
        // TODO add your handling code here:
        avanceStyleSaisiePeriode();
    }

    private void comboBoxPeriodeFocusLost(java.awt.event.FocusEvent evt) {
        // TODO add your handling code here:
        reculeStyleSaisiePeriode();
    }

    private void textFieldDossierFocusGained(java.awt.event.FocusEvent evt) {
        // TODO add your handling code here:
        avanceStyleSaisieDossier();
        if (textFieldDossier.getText().equals("Saisir chemin de sauvegarde")){
            textFieldDossier.setCaretPosition(0);
        }
    }

    private void textFieldDossierFocusLost(java.awt.event.FocusEvent evt) {
        // TODO add your handling code here:
        reculeStyleSaisieDossier();
    }

    private void textFieldDossierMousePressed(java.awt.event.MouseEvent evt) {
        // TODO add your handling code here:
        if (textFieldDossier.getText().equals("Saisir le chemin de sauvegarde")){
            textFieldDossier.setCaretPosition(0);
            textFieldDossier.setSelectionColor(Color.WHITE);
            textFieldDossier.setSelectedTextColor(Color.LIGHT_GRAY);
        } else {
            textFieldDossier.setSelectionColor(new Color(0,120,215));
            textFieldDossier.setSelectedTextColor(Color.WHITE);
        }
    }

    private void textFieldDossierMouseReleased(java.awt.event.MouseEvent evt) {
        // TODO add your handling code here:
        if (textFieldDossier.getText().equals("Saisir le chemin de sauvegarde")){
            textFieldDossier.setCaretPosition(0);
        }
    }

    private void textFieldDossierKeyTyped(java.awt.event.KeyEvent evt) {
        // TODO add your handling code here:
        if (textFieldDossier.getText().equals("Saisir le chemin de sauvegarde") && !((int)evt.getKeyChar() == 8 || (int)evt.getKeyChar() == 27 || (int)evt.getKeyChar() == 1)){
            textFieldDossier.setText("");
            textFieldDossier.setForeground(Color.BLACK);
        } else if (textFieldDossier.getText().equals("")){
            textFieldDossier.setText("Saisir le chemin de sauvegarde");
            textFieldDossier.setForeground(Color.LIGHT_GRAY);
            textFieldDossier.setCaretPosition(0);
        } else if (!(textFieldDossier.getText().equals("")) && !(textFieldDossier.getText().equals("Saisir le chemin de sauvegarde"))){
            textFieldDossier.setSelectionColor(new Color(0,120,215));
            textFieldDossier.setSelectedTextColor(Color.WHITE);
        }
        if ((int)evt.getKeyChar() == 127 && textFieldDossier.getText().equals("aisir le chemin de sauvegarde")){
            textFieldDossier.setText("Saisir le chemin de sauvegarde");
            textFieldDossier.setCaretPosition(0);
        }
        if ((int)evt.getKeyChar() == 27){
            requestFocus();
        }
        if ((int)evt.getKeyChar() == 1 && textFieldDossier.getText().equals("Saisir le chemin de sauvegarde")){
            textFieldDossier.setCaretPosition(0);
        }
    }

    private void boutonParcourirActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        fileChooserDossier.showOpenDialog(this);
    }

    private static boolean estUnEntier(String texte){
        if (texte == null || texte.length() == 0){
            return false;
        }
        try {
            int nb = Integer.parseInt(texte);
        } catch (NumberFormatException e){
            return false;
        }
        return true;
    }

    private void analyseTextFieldDateDebut(){
        String[] texte = textFieldDateDebut.getText().split(" ");

        if (estUnEntier(texte[0]) && Integer.parseInt(texte[0]) <= Date.dernierJourDuMois(panelCalendrierDateDebut.getDateSelectionnee().getMois(), panelCalendrierDateDebut.getDateSelectionnee().getAnnee())){
            panelCalendrierDateDebut.setDate(new Date(Integer.parseInt(texte[0]), panelCalendrierDateDebut.getDateSelectionnee().getMois(), panelCalendrierDateDebut.getDateSelectionnee().getAnnee()));
            if (texte.length >= 2){
                for (int i = 0; i < Date.MOIS_DE_L_ANNEE.length; i++){
                    if (Date.MOIS_DE_L_ANNEE[i].length() >= texte[1].length() && texte[1].equalsIgnoreCase(Date.MOIS_DE_L_ANNEE[i].substring(0, texte[1].length()))){
                        panelCalendrierDateDebut.setDate(new Date(panelCalendrierDateDebut.getDateSelectionnee().getJour(), i+1, panelCalendrierDateDebut.getDateSelectionnee().getAnnee()));
                        break;
                    }
                }
                if (texte.length >= 3 && estUnEntier(texte[2]) && Integer.parseInt(texte[2]) >= 1582){
                    panelCalendrierDateDebut.setDate(new Date(panelCalendrierDateDebut.getDateSelectionnee().getJour(), panelCalendrierDateDebut.getDateSelectionnee().getMois(), Integer.parseInt(texte[2])));
                }
            }
        } else if (estUnEntier(texte[0]) && Integer.parseInt(texte[0]) <= 31){
            Date dateTemp = panelCalendrierDateDebut.getDateSelectionnee();
            while (Date.dernierJourDuMois(dateTemp.getMois(), dateTemp.getAnnee()) < Integer.parseInt(texte[0])){
                dateTemp = dateTemp.moisSuivant();
            }
            panelCalendrierDateDebut.setDate(new Date(Integer.parseInt(texte[0]), dateTemp.getMois(), dateTemp.getAnnee()));
        } else if (!estUnEntier(texte[0])){
            for (int i = 0; i < Date.MOIS_DE_L_ANNEE.length; i++){
                if (Date.MOIS_DE_L_ANNEE[i].length() >= texte[0].length() && texte[0].equalsIgnoreCase(Date.MOIS_DE_L_ANNEE[i].substring(0, texte[0].length()))){
                    panelCalendrierDateDebut.setDate(new Date(1, i+1, panelCalendrierDateDebut.getDateSelectionnee().getAnnee()));
                    break;
                }
            }
            if (texte.length >= 2 && estUnEntier(texte[1]) && Integer.parseInt(texte[1]) >= 1582){
                panelCalendrierDateDebut.setDate(new Date(1, panelCalendrierDateDebut.getDateSelectionnee().getMois(), Integer.parseInt(texte[1])));
            }
        } else if (estUnEntier(texte[0]) && Integer.parseInt(texte[0]) >= 1582){
            panelCalendrierDateDebut.setDate(new Date(1, 1, Integer.parseInt(texte[0])));
        }
    }

    private void analyseTextFieldDateFin(){
        String[] texte = textFieldDateFin.getText().split(" ");

        if (estUnEntier(texte[0]) && Integer.parseInt(texte[0]) <= Date.dernierJourDuMois(panelCalendrierDateFin.getDateSelectionnee().getMois(), panelCalendrierDateFin.getDateSelectionnee().getAnnee())){
            panelCalendrierDateFin.setDate(new Date(Integer.parseInt(texte[0]), panelCalendrierDateFin.getDateSelectionnee().getMois(), panelCalendrierDateFin.getDateSelectionnee().getAnnee()));
            if (texte.length >= 2){
                for (int i = 0; i < Date.MOIS_DE_L_ANNEE.length; i++){
                    if (Date.MOIS_DE_L_ANNEE[i].length() >= texte[1].length() && texte[1].equalsIgnoreCase(Date.MOIS_DE_L_ANNEE[i].substring(0, texte[1].length()))){
                        panelCalendrierDateFin.setDate(new Date(panelCalendrierDateFin.getDateSelectionnee().getJour(), i+1, panelCalendrierDateFin.getDateSelectionnee().getAnnee()));
                        break;
                    }
                }
                if (texte.length >= 3 && estUnEntier(texte[2]) && Integer.parseInt(texte[2]) >= 1582){
                    panelCalendrierDateFin.setDate(new Date(panelCalendrierDateFin.getDateSelectionnee().getJour(), panelCalendrierDateFin.getDateSelectionnee().getMois(), Integer.parseInt(texte[2])));
                }
            }
        } else if (estUnEntier(texte[0]) && Integer.parseInt(texte[0]) <= 31){
            Date dateTemp = panelCalendrierDateFin.getDateSelectionnee();
            while (Date.dernierJourDuMois(dateTemp.getMois(), dateTemp.getAnnee()) < Integer.parseInt(texte[0])){
                dateTemp = dateTemp.moisSuivant();
            }
            panelCalendrierDateFin.setDate(new Date(Integer.parseInt(texte[0]), dateTemp.getMois(), dateTemp.getAnnee()));
        } else if (!estUnEntier(texte[0])){
            for (int i = 0; i < Date.MOIS_DE_L_ANNEE.length; i++){
                if (Date.MOIS_DE_L_ANNEE[i].length() >= texte[0].length() && texte[0].equalsIgnoreCase(Date.MOIS_DE_L_ANNEE[i].substring(0, texte[0].length()))){
                    panelCalendrierDateFin.setDate(new Date(1, i+1, panelCalendrierDateFin.getDateSelectionnee().getAnnee()));
                    break;
                }
            }
            if (texte.length >= 2 && estUnEntier(texte[1]) && Integer.parseInt(texte[1]) >= 1582){
                panelCalendrierDateFin.setDate(new Date(1, panelCalendrierDateFin.getDateSelectionnee().getMois(), Integer.parseInt(texte[1])));
            }
        } else if (estUnEntier(texte[0]) && Integer.parseInt(texte[0]) >= 1582){
            panelCalendrierDateFin.setDate(new Date(1, 1, Integer.parseInt(texte[0])));
        }
    }

    private void avanceStyleSaisieIntitule(){
        timerStyleSaisieIntitule.cancel();
        timerStyleSaisieIntitule.purge();
        java.util.TimerTask timerTask = new java .util.TimerTask() {
            public void run() {
                if (styleSaisieIntitule.getValue() < 100)
                    styleSaisieIntitule.setValue(styleSaisieIntitule.getValue()+1);
                else{
                    timerStyleSaisieIntitule.cancel();
                    timerStyleSaisieIntitule.purge();
                }
            }
        };
        timerStyleSaisieIntitule = new java.util.Timer();
        timerStyleSaisieIntitule.scheduleAtFixedRate(timerTask, 0, 2);
    }

    private void reculeStyleSaisieIntitule(){
        timerStyleSaisieIntitule.cancel();
        timerStyleSaisieIntitule.purge();
        java.util.TimerTask timerTask = new java .util.TimerTask() {
            public void run() {
                if (styleSaisieIntitule.getValue() > 0)
                    styleSaisieIntitule.setValue(styleSaisieIntitule.getValue()-1);
                else {
                    timerStyleSaisieIntitule.cancel();
                    timerStyleSaisieIntitule.purge();
                }
            }
        };
        timerStyleSaisieIntitule = new java.util.Timer();
        timerStyleSaisieIntitule.scheduleAtFixedRate(timerTask, 0, 2);
    }

    private void avanceStyleSaisieDateDebut(){
        timerStyleSaisieDateDebut.cancel();
        timerStyleSaisieDateDebut.purge();
        java.util.TimerTask timerTask = new java .util.TimerTask() {
            public void run() {
                if (styleSaisieDateDebut.getValue() < 100)
                    styleSaisieDateDebut.setValue(styleSaisieDateDebut.getValue()+1);
                else{
                    timerStyleSaisieDateDebut.cancel();
                    timerStyleSaisieDateDebut.purge();
                }
            }
        };
        timerStyleSaisieDateDebut = new java.util.Timer();
        timerStyleSaisieDateDebut.scheduleAtFixedRate(timerTask, 0, 2);
    }

    private void reculeStyleSaisieDateDebut(){
        timerStyleSaisieDateDebut.cancel();
        timerStyleSaisieDateDebut.purge();
        java.util.TimerTask timerTask = new java .util.TimerTask() {
            public void run() {
                if (styleSaisieDateDebut.getValue() > 0)
                    styleSaisieDateDebut.setValue(styleSaisieDateDebut.getValue()-1);
                else {
                    timerStyleSaisieDateDebut.cancel();
                    timerStyleSaisieDateDebut.purge();
                }
            }
        };
        timerStyleSaisieDateDebut = new java.util.Timer();
        timerStyleSaisieDateDebut.scheduleAtFixedRate(timerTask, 0, 2);
    }

    private void avanceStyleSaisieDateFin(){
        timerStyleSaisieDateFin.cancel();
        timerStyleSaisieDateFin.purge();
        java.util.TimerTask timerTask = new java .util.TimerTask() {
            public void run() {
                if (styleSaisieDateFin.getValue() < 100)
                    styleSaisieDateFin.setValue(styleSaisieDateFin.getValue()+1);
                else{
                    timerStyleSaisieDateFin.cancel();
                    timerStyleSaisieDateFin.purge();
                }
            }
        };
        timerStyleSaisieDateFin = new java.util.Timer();
        timerStyleSaisieDateFin.scheduleAtFixedRate(timerTask, 0, 2);
    }

    private void reculeStyleSaisieDateFin(){
        timerStyleSaisieDateFin.cancel();
        timerStyleSaisieDateFin.purge();
        java.util.TimerTask timerTask = new java .util.TimerTask() {
            public void run() {
                if (styleSaisieDateFin.getValue() > 0)
                    styleSaisieDateFin.setValue(styleSaisieDateFin.getValue()-1);
                else {
                    timerStyleSaisieDateFin.cancel();
                    timerStyleSaisieDateFin.purge();
                }
            }
        };
        timerStyleSaisieDateFin = new java.util.Timer();
        timerStyleSaisieDateFin.scheduleAtFixedRate(timerTask, 0, 2);
    }

    private void avanceStyleSaisiePeriode(){
        timerStyleSaisiePeriode.cancel();
        timerStyleSaisiePeriode.purge();
        java.util.TimerTask timerTask = new java .util.TimerTask() {
            public void run() {
                if (styleSaisiePeriode.getValue() < 100)
                    styleSaisiePeriode.setValue(styleSaisiePeriode.getValue()+1);
                else {
                    timerStyleSaisiePeriode.cancel();
                    timerStyleSaisiePeriode.purge();
                }
            }
        };
        timerStyleSaisiePeriode = new java.util.Timer();
        timerStyleSaisiePeriode.scheduleAtFixedRate(timerTask, 0, 2);
    }

    private void reculeStyleSaisiePeriode(){
        timerStyleSaisiePeriode.cancel();
        timerStyleSaisiePeriode.purge();
        java.util.TimerTask timerTask = new java .util.TimerTask() {
            public void run() {
                if (styleSaisiePeriode.getValue() > 0)
                    styleSaisiePeriode.setValue(styleSaisiePeriode.getValue()-1);
                else {
                    timerStyleSaisiePeriode.cancel();
                    timerStyleSaisiePeriode.purge();
                }
            }
        };
        timerStyleSaisiePeriode = new java.util.Timer();
        timerStyleSaisiePeriode.scheduleAtFixedRate(timerTask, 0, 2);
    }

    private void avanceStyleSaisieDossier(){
        timerStyleSaisieDossier.cancel();
        timerStyleSaisieDossier.purge();
        java.util.TimerTask timerTask = new java .util.TimerTask() {
            public void run() {
                if (styleSaisieDossier.getValue() < 100)
                    styleSaisieDossier.setValue(styleSaisieDossier.getValue()+1);
                else {
                    timerStyleSaisieDossier.cancel();
                    timerStyleSaisieDossier.purge();
                }
            }
        };
        timerStyleSaisieDossier = new java.util.Timer();
        timerStyleSaisieDossier.scheduleAtFixedRate(timerTask, 0, 2);
    }

    private void reculeStyleSaisieDossier(){
        timerStyleSaisieDossier.cancel();
        timerStyleSaisieDossier.purge();
        java.util.TimerTask timerTask = new java .util.TimerTask() {
            public void run() {
                if (styleSaisieDossier.getValue() > 0)
                    styleSaisieDossier.setValue(styleSaisieDossier.getValue()-1);
                else {
                    timerStyleSaisieDossier.cancel();
                    timerStyleSaisieDossier.purge();
                }
            }
        };
        timerStyleSaisieDossier = new java.util.Timer();
        timerStyleSaisieDossier.scheduleAtFixedRate(timerTask, 0, 2);
    }

    public PanelCalendrierDate getPanelCalendrierDateDebut(){
        return panelCalendrierDateDebut;
    }

    public PanelCalendrierDate getPanelCalendrierDateFin(){
        return panelCalendrierDateFin;
    }

    public JTextField getTextFieldDateDebut(){
        return textFieldDateDebut;
    }

    public JTextField getTextFieldDateFin(){
        return textFieldDateFin;
    }

    private java.util.Timer timerStyleSaisieIntitule = new java.util.Timer();
    private java.util.Timer timerStyleSaisieDateDebut = new java.util.Timer();
    private java.util.Timer timerStyleSaisieDateFin = new java.util.Timer();
    private java.util.Timer timerStyleSaisiePeriode = new java.util.Timer();
    private java.util.Timer timerStyleSaisieDossier = new java.util.Timer();

    // Variables declaration - do not modify
    private javax.swing.JButton boutonParcourir;
    private javax.swing.JComboBox<String> comboBoxPeriode;
    private javax.swing.JFileChooser fileChooserDossier;
    private javax.swing.JLabel labelDateDebut;
    private javax.swing.JLabel labelDateFin;
    private javax.swing.JLabel labelDossier;
    private javax.swing.JLabel labelIntitule;
    private javax.swing.JLabel labelPeriode;
    private PanelCalendrierDate panelCalendrierDateDebut;
    private PanelCalendrierDate panelCalendrierDateFin;
    private javax.swing.JProgressBar styleSaisieDateDebut;
    private javax.swing.JProgressBar styleSaisieDateFin;
    private javax.swing.JProgressBar styleSaisieDossier;
    private javax.swing.JProgressBar styleSaisieIntitule;
    private javax.swing.JProgressBar styleSaisiePeriode;
    private javax.swing.JTextField textFieldDateDebut;
    private javax.swing.JTextField textFieldDateFin;
    private javax.swing.JTextField textFieldDossier;
    private javax.swing.JTextField textFieldIntitule;
    // End of variables declaration
}
